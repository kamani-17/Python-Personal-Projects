# ------------------------------------------
# Chess Game: Complete Implementation
# ------------------------------------------

# Helper Functions: Piece Symbols & Printing
def get_symbol(piece):
    if piece is None:
        return ' . '
    symbols = {
        ('white', 'pawn'): '♙', ('black', 'pawn'): '♟',
        ('white', 'rook'): '♖', ('black', 'rook'): '♜',
        ('white', 'knight'): '♘', ('black', 'knight'): '♞',
        ('white', 'bishop'): '♗', ('black', 'bishop'): '♝',
        ('white', 'queen'): '♕', ('black', 'queen'): '♛',
        ('white', 'king'): '♔', ('black', 'king'): '♚'
    }
    return f" {symbols.get((piece['color'], piece['kind']), '?')} "

def print_board():
    print("  A  B  C  D  E  F  G  H")
    for i, row in enumerate(board):
        print(8 - i, end=' ')
        for square in row:
            print(get_symbol(square), end='')
        print(' ', 8 - i)
    print("  A  B  C  D  E  F  G  H")

# ------------------------------------------
# Step 1: Create Board & Place Pieces
# ------------------------------------------

def make_piece(color, kind):
    return {"color": color, "kind": kind}

# Create an empty 8x8 board
board = [[None for _ in range(8)] for _ in range(8)]

# Define piece order for back rows
back_row = ["rook", "knight", "bishop", "queen", "king", "bishop", "knight", "rook"]

# Place black and white pieces
for col in range(8): 
    board[0][col] = make_piece("black", back_row[col])  # black back row
    board[1][col] = make_piece("black", "pawn")         # black pawns
    board[6][col] = make_piece("white", "pawn")         # white pawns
    board[7][col] = make_piece("white", back_row[col])  # white back row

print("Initial Board Setup:")
print_board()

# ------------------------------------------
# Step 2: Player Move Input + Move Execution
# ------------------------------------------

def parse_move(move):
    """Parse a move string like 'e2 e4' into start and end coordinates."""
    try:
        start_square, end_square = move.split()
        # Convert from chess notation to array indices
        start_row = 8 - int(start_square[1])  # 1->7, 8->0
        start_col = ord(start_square[0]) - ord('a')
        end_row = 8 - int(end_square[1])
        end_col = ord(end_square[0]) - ord('a')
        return start_row, start_col, end_row, end_col
    except (ValueError, IndexError):
        raise ValueError("Invalid move format. Use the format 'e2 e4'.")

# ------------------------------------------
# Step 3: Movement Validation, Basic Rules
# ------------------------------------------

def is_valid_move(piece, start_row, start_col, end_row, end_col):
    if piece is None:
        return False

    # Don't allow moving to the same square
    if start_row == end_row and start_col == end_col:
        return False

    # Don't capture own piece
    if board[end_row][end_col] is not None and board[end_row][end_col]['color'] == piece['color']:
        return False

    # Pawn movement
    if piece['kind'] == 'pawn':
        direction = -1 if piece['color'] == 'white' else 1
        start_row_limit = 6 if piece['color'] == 'white' else 1
        # Double move from starting position
        if start_row == start_row_limit and end_row == start_row + 2 * direction and start_col == end_col:
            if board[start_row + direction][start_col] is not None:
                return False  # Blocked on the way
            return board[end_row][end_col] is None
        # Single move forward
        elif end_row == start_row + direction and start_col == end_col:
            return board[end_row][end_col] is None
        # Capture move
        elif end_row == start_row + direction and abs(start_col - end_col) == 1:
            return board[end_row][end_col] is not None and board[end_row][end_col]['color'] != piece['color']
        else:
            return False

    # Rook movement
    if piece['kind'] == 'rook':
        if start_col == end_col:  # Vertical move
            step = 1 if end_row > start_row else -1
            for r in range(start_row + step, end_row, step):
                if board[r][start_col] is not None:
                    return False
        elif start_row == end_row:  # Horizontal move
            step = 1 if end_col > start_col else -1
            for c in range(start_col + step, end_col, step):
                if board[start_row][c] is not None:
                    return False
        else:
            return False
        return True

    # Bishop movement
    if piece['kind'] == 'bishop':
        if abs(start_row - end_row) != abs(start_col - end_col):
            return False
        row_step = 1 if end_row > start_row else -1
        col_step = 1 if end_col > start_col else -1
        r, c = start_row + row_step, start_col + col_step
        while r != end_row and c != end_col:
            if board[r][c] is not None:
                return False
            r += row_step
            c += col_step
        return True

    # Queen movement
    if piece['kind'] == 'queen':
        # Combine rook and bishop movement rules
        return is_valid_move({"color": piece['color'], "kind": "rook"}, start_row, start_col, end_row, end_col) or \
               is_valid_move({"color": piece['color'], "kind": "bishop"}, start_row, start_col, end_row, end_col)

    # King movement
    if piece['kind'] == 'king':
        return abs(start_row - end_row) <= 1 and abs(start_col - end_col) <= 1

    # Knight movement
    if piece['kind'] == 'knight':
        return (abs(start_row - end_row), abs(start_col - end_col)) in [(2, 1), (1, 2)]

    return False

# ------------------------------------------
# Step 4: Check Detection & Game End Conditions
# ------------------------------------------

def is_in_check(color):
    """Check if the king of the given color is in check."""
    # Find the king's position
    king_position = None
    for row in range(8):
        for col in range(8):
            piece = board[row][col]
            if piece and piece['kind'] == 'king' and piece['color'] == color:
                king_position = (row, col)
                break
        if king_position:
            break
    
    if not king_position:
        return False  # This shouldn't happen in a normal game
    
    # Check if any opponent piece can capture the king
    opponent_color = 'white' if color == 'black' else 'black'
    for row in range(8):
        for col in range(8):
            piece = board[row][col]
            if piece and piece['color'] == opponent_color:
                if is_valid_move(piece, row, col, king_position[0], king_position[1]):
                    return True
    return False

def is_checkmate(color):
    if not is_in_check(color):
        return False
    
    # Try all possible moves for all pieces of the given color
    for start_row in range(8):
        for start_col in range(8):
            piece = board[start_row][start_col]
            if piece and piece['color'] == color:
                for end_row in range(8):
                    for end_col in range(8):
                        if is_valid_move(piece, start_row, start_col, end_row, end_col):
                            # Make the move temporarily
                            captured_piece = board[end_row][end_col]
                            board[end_row][end_col] = piece
                            board[start_row][start_col] = None
                            
                            # Check if still in check
                            still_in_check = is_in_check(color)
                            
                            # Undo the move
                            board[start_row][start_col] = piece
                            board[end_row][end_col] = captured_piece
                            
                            # If any move gets us out of check, it's not checkmate
                            if not still_in_check:
                                return False
    
    # If we get here, no moves can get us out of check
    return True

def is_stalemate(color):
    if is_in_check(color):
        return False
    for start_row in range(8):
        for start_col in range(8):
            piece = board[start_row][start_col]
            if piece and piece['color'] == color:
                for end_row in range(8):
                    for end_col in range(8):
                        if is_valid_move(piece, start_row, start_col, end_row, end_col):
                            return False
    return True

# ------------------------------------------
# Main Game Loop
# ------------------------------------------

current_turn = 'white'

while True:
    print(f"\n{current_turn.capitalize()}'s turn")
    if is_in_check(current_turn):
        print(f"{current_turn.capitalize()} is in check!")

    if is_checkmate(current_turn):
        print(f"Checkmate! {current_turn.capitalize()} loses.")
        break
    if is_stalemate(current_turn):
        print("Stalemate! The game is a draw.")
        break

    move = input("Enter your move (e.g., e2 e4): ").strip().lower()
    try:
        start_row, start_col, end_row, end_col = parse_move(move)
        piece = board[start_row][start_col]

        if piece is None or piece['color'] != current_turn:
            print("Invalid move: No valid piece at the starting square.")
            continue
        if not is_valid_move(piece, start_row, start_col, end_row, end_col):
            print("Invalid move for the selected piece.")
            continue

        # Make the move
        board[end_row][end_col] = piece
        board[start_row][start_col] = None
        print_board()
        current_turn = 'black' if current_turn == 'white' else 'white'
    except ValueError as e:
        print(e)
