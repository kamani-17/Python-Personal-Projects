# Sudoku Solver Game/Tool
# Broken down intom 5 phases: this will be my second personal python project. 
# Consisting of 5 Phases:

# Phase 1: Core Setup
# Task 1: Grid Strucuture Defined - represent a 9x9 board with placeholders, establish a way to load in a puzzle (hardcoded or from a file)
# Task 2: Visual Display Ready - Print the grid to console and add lines to separate the 3x3 boxes for reading

board = [ # bit annoyed here as I did something similar with Chess, create a variable and define it as a list of lists.
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
]

for i in range(len(board)): # actually tossed this at cursos as the original code was incorrect.
    if i % 3 == 0 and i != 0:
        print("-" * 21)
    
    row_str = ""
    for j in range(len(board[i])):
        if j % 3 == 0 and j != 0:
            row_str += "| "
        row_str += str(board[i][j]) + " "
    print(row_str)
    
# Phase 1 Review: As I mentioned a bit annoyed as I did something similar with chess and knew a list of lists was the way to go. Beyond that also tossed line 21 through to 24 to cursor. As I kept getting visual errors.

# Phase 2: Logic Foundations
# Task 1: Empty Cell Locator Works - function to find the next empty cell and returns location in a consistent format
# Task 2: Validation System Complete - check if a number can be placed in a cell and is valid across row, column, and 3x3 grid.

def find(empty_cell):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return (i, j)
    return None

def validate(board, number, position): 
    # Check row
    for i in range(len(board)):
        if board[position[0]][i] == number and position[1] != i:
            return False
            
    # Check column
    for i in range(len(board)):
        if board[i][position[1]] == number and position[0] != i:
            return False
            
    # Check 3x3 box
    box_x = position[1] // 3
    box_y = position[0] // 3
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if board[i][j] == number and (i, j) != position:
                return False
                
    return True

# Phase 3: Solver Engine
# Task 1: Recursive backtracking algorithm in place, fills all valid cells and backtracks if stuck, solves any vali board completely
# Task 2: Solver tested on multiple boards, verify performance on easy, medium, and hard puizzles, also compare before/after boards for correctness.

def solve(board, count=0):
    empty_cell = find(board)
    if not empty_cell:
        return True, count
    else:
        row, col = empty_cell
        for i in range(1, 10):
            if validate(board, i, (row, col)):
                board[row][col] = i
                count += 1

                if solve(board, count)[0]:
                    return True, count
                board[row][col] = 0
                count -= 1
        return False, count

def print_board(board):
    for i in range(len(board)):
        if i % 3 == 0 and i != 0:
            print("-" * 21)
        
        row_str = ""
        for j in range(len(board[i])):
            if j % 3 == 0 and j != 0:
                row_str += "| "
            row_str += str(board[i][j]) + " "
        print(row_str)

print("Unsolved Board:")
print_board(board)
solve(board)
print("\nSolved Board:")
print_board(board)


# Phase 4: Usability Enhacements (Opitional)
# Task 1: User Board Input - allow user to create and validate their board, validate entries before solving
# Task 2: Timer/Performance Metrics - display time taken and number of recursive calls (for fun)

def get_user_board():
    print("Enter your Sudoku board row by row. Use numbers 1-9 for filled cells and 0 for empty cells.")
    user_board = []
    for i in range(9):
        while True:
            try:
                row = input(f"Enter row {i+1}: ")
                row_values = [int(num) for num in row.split()]
                
                # Check if we got exactly 9 numbers
                if len(row_values) != 9:
                    print("Error: Please enter exactly 9 numbers!")
                    continue
                
                # Check if all numbers are between 0-9
                if not all(0 <= num <= 9 for num in row_values):
                    print("Error: Numbers must be between 0 and 9!")
                    continue
                
                user_board.append(row_values)
                break
                
            except ValueError:
                print("Error: Please enter only numbers!")
    
    return user_board

# Test the user input
print("\nLet's try your own Sudoku board!")
user_board = get_user_board()
print("\nYour entered board:")
print_board(user_board)

import time

start_time = time.time()
success, attempts = solve(user_board)
end_time = time.time()

if success:
    print(f"\nSolved the board in {end_time - start_time:.4f} seconds")
    print(f"Total number of attempts: {attempts}")
else:
    print("\nNo solution found. Please check your board and try again.")

print_board(user_board)

#Phase 5: Stretch Goals (Optional)
# Task 1: GUI Interface - Build visual interface with Tkinter or Pygame, allow clicking, typing numbers and pressing "soleve"
import tkinter as tk
from tkinter import messagebox
import random

# Task 2: Sudoku Generator - create new puzzles of varing difficulty, ensure generated puzzle has only one unique solution.  

def generate_solved_board():
    # Create an empty board
    board = [[0 for _ in range(9)] for _ in range(9)]
    
    # Fill the diagonal 3x3 boxes first (they are independent)
    for box in range(3):
        numbers = list(range(1, 10))
        random.shuffle(numbers)
        for i in range(3):
            for j in range(3):
                board[box * 3 + i][box * 3 + j] = numbers[i * 3 + j]
    
    # Solve the rest of the board
    success, _ = solve(board)
    if not success:
        return None
    return board

def remove_numbers(board, difficulty):
    # Make a copy of the solved board
    puzzle = [row[:] for row in board]
    
    # Define number of cells to remove based on difficulty
    cells_to_remove = {
        'easy': 30,    # 30 empty cells
        'medium': 40,  # 40 empty cells
        'hard': 50     # 50 empty cells
    }
    
    # Get all cell positions
    positions = [(i, j) for i in range(9) for j in range(9)]
    random.shuffle(positions)
    
    # Remove numbers
    for i, j in positions[:cells_to_remove[difficulty]]:
        puzzle[i][j] = 0
    
    return puzzle

def has_unique_solution(puzzle):
    # Make a copy of the puzzle
    board = [row[:] for row in puzzle]
    
    # Count solutions
    solutions = 0
    
    def count_solutions(board):
        nonlocal solutions
        if solutions > 1:  # Stop if we found more than one solution
            return
        
        empty = find(board)
        if not empty:
            solutions += 1
            return
        
        row, col = empty
        for num in range(1, 10):
            if validate(board, num, (row, col)):
                board[row][col] = num
                count_solutions(board)
                board[row][col] = 0
    
    count_solutions(board)
    return solutions == 1

def generate_puzzle(difficulty='medium'):
    while True:
        # Generate a solved board
        solved_board = generate_solved_board()
        if solved_board is None:
            continue
        
        # Remove numbers to create puzzle
        puzzle = remove_numbers(solved_board, difficulty)
        
        # Check if puzzle has unique solution
        if has_unique_solution(puzzle):
            return puzzle, solved_board

class SudokuGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Sudoku Solver")
        self.root.geometry("540x600")
        
        # Create main frame
        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack(pady=20)
        
        # Create 9x9 grid of entry widgets
        self.cells = {}
        for i in range(9):
            for j in range(9):
                cell = tk.Entry(
                    self.main_frame,
                    width=2,
                    font=('Arial', 18),
                    justify='center'
                )
                cell.grid(row=i, column=j, padx=1, pady=1)
                
                # Add borders for 3x3 boxes
                if i % 3 == 0 and i != 0:
                    cell.grid(pady=(10, 1))
                if j % 3 == 0 and j != 0:
                    cell.grid(padx=(10, 1))
                
                # Store cell reference
                self.cells[(i, j)] = cell
        
        # Create buttons frame
        self.button_frame = tk.Frame(self.root)
        self.button_frame.pack(pady=20)
        
        # Solve button
        self.solve_button = tk.Button(
            self.button_frame,
            text="Solve",
            command=self.solve_puzzle,
            font=('Arial', 12)
        )
        self.solve_button.pack(side=tk.LEFT, padx=5)
        
        # Clear button
        self.clear_button = tk.Button(
            self.button_frame,
            text="Clear",
            command=self.clear_board,
            font=('Arial', 12)
        )
        self.clear_button.pack(side=tk.LEFT, padx=5)
        
        # Create difficulty frame
        self.difficulty_frame = tk.Frame(self.root)
        self.difficulty_frame.pack(pady=10)
        
        # Difficulty label
        tk.Label(
            self.difficulty_frame,
            text="Difficulty:",
            font=('Arial', 12)
        ).pack(side=tk.LEFT, padx=5)
        
        # Difficulty buttons
        for diff in ['Easy', 'Medium', 'Hard']:
            btn = tk.Button(
                self.difficulty_frame,
                text=diff,
                command=lambda d=diff.lower(): self.generate_new_puzzle(d),
                font=('Arial', 12)
            )
            btn.pack(side=tk.LEFT, padx=5)
    
    def generate_new_puzzle(self, difficulty):
        self.clear_board()
        # Disable buttons during generation
        self.solve_button.config(state='disabled')
        self.clear_button.config(state='disabled')
        for child in self.difficulty_frame.winfo_children():
            if isinstance(child, tk.Button):
                child.config(state='disabled')
        
        # Update the window to show disabled state
        self.root.update()
        
        try:
            puzzle, _ = generate_puzzle(difficulty)
            self.set_board(puzzle)
            messagebox.showinfo("New Puzzle", f"Generated a new {difficulty} puzzle!")
        finally:
            # Re-enable buttons
            self.solve_button.config(state='normal')
            self.clear_button.config(state='normal')
            for child in self.difficulty_frame.winfo_children():
                if isinstance(child, tk.Button):
                    child.config(state='normal')
    
    def get_board(self):
        board = []
        for i in range(9):
            row = []
            for j in range(9):
                value = self.cells[(i, j)].get()
                if value == "":
                    row.append(0)
                else:
                    try:
                        num = int(value)
                        if 1 <= num <= 9:
                            row.append(num)
                        else:
                            messagebox.showerror("Error", "Numbers must be between 1 and 9!")
                            return None
                    except ValueError:
                        messagebox.showerror("Error", "Please enter only numbers!")
                        return None
            board.append(row)
        return board
    
    def set_board(self, board):
        for i in range(9):
            for j in range(9):
                value = board[i][j]
                if value != 0:
                    self.cells[(i, j)].delete(0, tk.END)
                    self.cells[(i, j)].insert(0, str(value))
    
    def solve_puzzle(self):
        board = self.get_board()
        if board is None:
            return
        
        start_time = time.time()
        success, attempts = solve(board)
        end_time = time.time()
        
        if success:
            self.set_board(board)
            messagebox.showinfo("Success", 
                f"Solved in {end_time - start_time:.2f} seconds\n"
                f"Total attempts: {attempts}")
        else:
            messagebox.showerror("Error", "No solution exists!")
    
    def clear_board(self):
        for cell in self.cells.values():
            cell.delete(0, tk.END)

# Create and run the GUI
if __name__ == "__main__":
    root = tk.Tk()
    app = SudokuGUI(root)
    root.mainloop()

