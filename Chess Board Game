# Chess Game Build: Step 1 & Step 2 Complete
# Text-based chess — visual board, move input, live updates

# ------------------------------------------
# Helper Functions: Piece Symbols & Printing
# ------------------------------------------

def get_symbol(piece):
    if piece is None:
        return ' . '
    symbols = {
        ('white', 'pawn'): '♙', ('black', 'pawn'): '♟',
        ('white', 'rook'): '♖', ('black', 'rook'): '♜',
        ('white', 'knight'): '♘', ('black', 'knight'): '♞',
        ('white', 'bishop'): '♗', ('black', 'bishop'): '♝',
        ('white', 'queen'): '♕', ('black', 'queen'): '♛',
        ('white', 'king'): '♔', ('black', 'king'): '♚'
    }
    return f" {symbols.get((piece['color'], piece['kind']), '?')} "

def print_board():
    print("  A  B  C  D  E  F  G  H")
    for i, row in enumerate(board):
        print(8 - i, end=' ')
        for square in row:
            print(get_symbol(square), end='')
        print(' ', 8 - i)
    print("  A  B  C  D  E  F  G  H")

# ------------------------------------------
# Step 1: Create Board & Place Pieces
# ------------------------------------------

def make_piece(color, kind):
    return {"color": color, "kind": kind}

# Create an empty 8x8 board
board = [[None for _ in range(8)] for _ in range(8)]

# Define piece order for back rows
back_row = ["rook", "knight", "bishop", "queen", "king", "bishop", "knight", "rook"]

# Place black and white pieces
for col in range(8): 
    board[0][col] = make_piece("black", back_row[col])  # black back row
    board[1][col] = make_piece("black", "pawn")         # black pawns
    board[6][col] = make_piece("white", "pawn")         # white pawns
    board[7][col] = make_piece("white", back_row[col])  # white back row

# Print the starting board
print_board()

# Temporary pawn rule checker to avoid error in Step 2
def is_valid_pawn_move(piece, start_row, start_col, end_row, end_col):
    return True  # Allows all pawn moves for now

# ------------------------------------------
# Step 2: Player Move Input + Move Execution
# Key Tasks: Player Input, Move Exedution, Basic Validation
# ------------------------------------------

# prompt for player input
move = input ("Enter your move (e.g., e2 e4): ").strip().lower()
start_square, end_square = move.split()

start_row = 8 - int(start_square[1])
start_col = ord(start_square[0]) - ord('a')

end_row = 8 - int(end_square[1])
end_col = ord(end_square[0]) - ord('a')

piece = board[start_row][start_col]
if piece is None:
    print("Invalid move: No piece at the starting square.")
    exit()

if piece['kind'] == 'pawn':
    if not is_valid_pawn_move(piece, start_row, start_col, end_row, end_col):
        print("Invalid move for pawn.")
        exit()

board[end_row][end_col] = piece
board[start_row][start_col] = None
print_board()

# ------------------------------------------
# Step 3: Player Move Input + Move Execution
# Key Tasks: Movement Validation, Basic Rules, Capture Logic & Check
# ------------------------------------------

def is_valid_move(piece, start_row, start_col, end_row, end_col):
    if piece is None:
        return False

    # Basic movement validation (to be expanded)
    if piece['kind'] == 'pawn':
        direction = 1 if piece['color'] == 'white' else -1
        start_row_limit = 6 if piece['color'] == 'white' else 1
        if start_row == start_row_limit and end_row == start_row + 2 * direction and start_col == end_col:
            return True  # Double move from starting position
        elif end_row == start_row + direction and start_col == end_col:
            return True  # Single move forward
        elif end_row == start_row + direction and abs(start_col - end_col) == 1:
            return True  # Capture move

    # Add more rules for other pieces here...
    if piece['kind'] == 'rook':
        if start_col == end_col:  # Vertical move
            step = 1 if end_row > start_row else -1
            for r in range(start_row + step, end_row, step):
                if board[r][start_col] is not None:  # Path is blocked
                    return False
        elif start_row == end_row:  # Horizontal move
            step = 1 if end_col > start_col else -1
            for c in range(start_col + step, end_col, step):
                if board[start_row][c] is not None:  # Path is blocked
                    return False
        else:
            return False  # Rooks can only move in straight lines

        # Ensure destination is empty or occupied by an opponent's piece
        if board[end_row][end_col] is None or board[end_row][end_col]['color'] != piece['color']:
            return True
        
    if piece['kind'] == 'bishop':
        # Check if the move is diagonal
        if abs(start_row - end_row) != abs(start_col - end_col):
            return False  # Bishops can only move diagonally

        # Determine direction of movement
        row_step = 1 if end_row > start_row else -1
        col_step = 1 if end_col > start_col else -1

        # Check if the path is clear
        r, c = start_row + row_step, start_col + col_step
        while r != end_row and c != end_col:
            if board[r][c] is not None:  # Path is blocked
                return False
            r += row_step
            c += col_step

        # Final square check
        if board[end_row][end_col] is None or board[end_row][end_col]['color'] != piece['color']:
            return True
        
    if piece['kind'] == 'queen':
        # Combine rook and bishop movement rules
        if (start_col == end_col or start_row == end_row):  # Rook-like movement
            step = 1 if end_row > start_row else -1
            for r in range(start_row + step, end_row, step):
                if board[r][start_col] is not None:  # Path is blocked
                    return False
        elif abs(start_row - end_row) == abs(start_col - end_col):  # Bishop-like movement
            row_step = 1 if end_row > start_row else -1
            col_step = 1 if end_col > start_col else -1
            r, c = start_row + row_step, start_col + col_step
            while r != end_row and c != end_col:
                if board[r][c] is not None:  # Path is blocked
                    return False
                r += row_step
                c += col_step

            # Final square check
            if board[end_row][end_col] is None or board[end_row][end_col]['color'] != piece['color']:
                return True

    return False  # Default to invalid move
